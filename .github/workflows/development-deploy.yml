name: Development Deploy

on:
  push:
    branches: [develop]
  workflow_dispatch: {}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm run test

  deploy-workers-dev:
    name: Deploy Workers to Development
    runs-on: ubuntu-latest
    needs: test
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Workers Development
        working-directory: ./apps/workers
        run: |
          echo " Normalizing Cloudflare API token..."
          if [ -n "${CLOUDFLARE_API_TOKEN:-}" ]; then
            TRIMMED=$(printf '%s' "$CLOUDFLARE_API_TOKEN" | tr -d '\r\n' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            if [[ $TRIMMED == \"* ]]; then TRIMMED=${TRIMMED#\"}; fi
            if [[ $TRIMMED == *\" ]]; then TRIMMED=${TRIMMED%\"}; fi
            if [[ $TRIMMED == \'* ]]; then TRIMMED=${TRIMMED#\'}; fi
            if [[ $TRIMMED == *\' ]]; then TRIMMED=${TRIMMED%\'}; fi
            export CLOUDFLARE_API_TOKEN="$TRIMMED"
            echo "Token length: ${#CLOUDFLARE_API_TOKEN}"
          fi

          if npx wrangler whoami; then
            echo " Authentication successful, deploying to development..."
            npx wrangler deploy --env development
          else
            echo " Cloudflare authentication failed."
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  notify-dev:
    name: Notify Development Deploy
    runs-on: ubuntu-latest
    needs: [deploy-workers-dev]
    if: always()

    steps:
      - name: Notify Success
        if: needs.deploy-workers-dev.result == 'success'
        run: |
          echo "üöÄ Development Workers deployment successful!"
          echo "API (Dev): https://casto-workers-dev.casto-api.workers.dev"

      - name: Notify Failure
        if: needs.deploy-workers-dev.result != 'success'
        run: |
          echo "‚ùå Development Workers deployment failed!"
          exit 1
