name: Staging Deploy

on:
  push:
    branches: [develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build
        run: npm run build

  deploy-web:
    name: Deploy Web to Staging
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-workers:
    name: Deploy Workers to Staging
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Workers Staging
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: './apps/workers'
          command: deploy --env staging

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-workers]
    if: always()

    steps:
      - name: Notify Success
        if: needs.deploy-web.result == 'success' && needs.deploy-workers.result == 'success'
        run: |
          echo "✅ Staging deployment successful!"
          echo "Web: https://staging.casto.app"
          echo "API: https://api-staging.casto.app"

      - name: Notify Failure
        if: needs.deploy-web.result == 'failure' || needs.deploy-workers.result == 'failure'
        run: |
          echo "❌ Staging deployment failed!"
          exit 1
